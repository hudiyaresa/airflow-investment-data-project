version: '3.8'
services:
  airflow:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: airflow_standalone
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW_DB_URI}
      - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
    depends_on:
      - airflow_metadata
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./investment_db/external:/opt/airflow/external
      - ./variables_and_connections:/opt/airflow/variables_and_connections
    networks:
      - airflow-networks

  airflow_metadata:
    image: postgres:latest
    container_name: airflow_metadata
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_DB_NAME}
    ports:
      - 5432:5432
    volumes:
      - airflow_metadata:/var/lib/postgresql/data
    networks:
      - airflow-networks

  profile_quality_db:
    image: postgres:latest
    container_name: profile_quality_db
    environment:
      POSTGRES_USER: ${PROFILE_QUALITY_DB_USER}
      POSTGRES_PASSWORD: ${PROFILE_QUALITY_DB_PASSWORD}
      POSTGRES_DB: ${PROFILE_QUALITY_DB_NAME}
    ports:
      - 5434:5432
    networks:
      - airflow-networks
    volumes:
      - profile_quality_db:/var/lib/postgresql/data

  investment_db: 
    image: postgres:latest
    container_name: investment_db
    environment:
      POSTGRES_USER: ${INVESTMENT_DB_USER}
      POSTGRES_PASSWORD: ${INVESTMENT_DB_PASSWORD}
      POSTGRES_DB: ${INVESTMENT_DB_NAME}
    ports:
      - 5435:5432
    networks:
      - airflow-networks
    volumes:
      - ./investment_db/source:/docker-entrypoint-initdb.d
      - investment_data:/var/lib/postgresql/data


  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: minio
    hostname: minio
    restart: always
    volumes:
      - minio-data:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - airflow-networks

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc rm -r --force myminio/extracted-data;
      /usr/bin/mc mb myminio/extracted-data;
      /usr/bin/mc policy download myminio/extracted-data;
      exit 0;
      "      

  warehouse_db:
    image: postgres:latest
    container_name: warehouse_db
    environment:
      POSTGRES_USER: ${WAREHOUSE_DB_USER}
      POSTGRES_PASSWORD: ${WAREHOUSE_DB_PASSWORD}
      POSTGRES_DB: ${WAREHOUSE_DB_NAME}
    ports:
      - 5437:5432
    networks:
      - airflow-networks
    volumes:
      - ./investment_db/warehouse/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./investment_db/warehouse/etl_log.sql:/docker-entrypoint-initdb.d/02-etl_log.sql
      - warehouse_db:/var/lib/postgresql/data

  spark-master:
    image: bitnami/spark:latest
    command: bin/spark-class org.apache.spark.deploy.master.Master
    container_name: spark-master
    ports:
      - "9090:8080"
      - "7077:7077"
    networks:
      - airflow-networks

  spark-worker-1:
    image: bitnami/spark:latest
    container_name: spark-worker-1
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 3
      SPARK_WORKER_MEMORY: 4g
      SPARK_MASTER_URL: spark://spark-master:7077
    networks:
      - airflow-networks

  spark-worker-2:
    image: bitnami/spark:latest
    container_name: spark-worker-2
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 3
      SPARK_WORKER_MEMORY: 4g
      SPARK_MASTER_URL: spark://spark-master:7077
    networks:
      - airflow-networks

  spark-worker-3:
    image: bitnami/spark:latest
    container_name: spark-worker-3
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 3
      SPARK_WORKER_MEMORY: 4g
      SPARK_MASTER_URL: spark://spark-master:7077
    networks:
      - airflow-networks

volumes:
  airflow_metadata:
    driver: local
    name: airflow_metadata

  investment_data:
    driver: local
    name: investment_data

  minio-data:
    driver: local
    name: minio-data

  profile_quality_db:
    driver: local
    name: profile_quality_db

  warehouse_db:
    driver: local
    name: warehouse_db

networks:
  airflow-networks:
    driver: bridge
    name: airflow-networks